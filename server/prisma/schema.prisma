// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Book {
  id              Int              @id @default(autoincrement())
  title           String           @db.VarChar(100)
  author          String           @db.VarChar(100)
  isbn            String           @unique @db.VarChar(13)
  price           Float            @default(0)
  rating          Float            @default(0)
  ratingCount     Int              @default(0)
  description     String           @db.VarChar(5000)
  pdfLink         String           @db.VarChar(1000)
  cover           String           @db.VarChar(1000)
  pages           Int              @default(0)
  words           Int              @default(0)
  timeToRead      Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  Author          Author?          @relation(fields: [authorId], references: [id])
  authorId        Int?
  Review          Review[]
  BookGenre       BookGenre[]
  SavedBook       SavedBook[]
  DiscountTickets DiscountTicket[]
  UserProgress    UserProgress[]
  Publisher       Publisher?       @relation(fields: [publisherId], references: [id])
  publisherId     Int?
  Inventory       Inventory[]
  OrderItem       OrderItem[]
}

model Genre {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(100)
  BookGenre BookGenre[]
}

model BookGenre {
  bookId  Int
  genreId Int
  Book    Book  @relation(fields: [bookId], references: [id])
  Genre   Genre @relation(fields: [genreId], references: [id])

  @@id([bookId, genreId])
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  avatar       String?        @default("https://res.cloudinary.com/dx3w3vz4w/image/upload/v1626820134/avatars/avatar-1_ukzv9v.png")
  googleId     String?        @default("")
  name         String
  role         String         @default("user")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  salt         String?        @unique
  sessionToken String?        @unique
  Author       Author?
  Review       Review[]
  SavedBook    SavedBook[]
  Subsribers   Subscriber[]
  UserProgress UserProgress[]
  Order        Order[]
}

model SavedBook {
  userId Int
  bookId Int
  User   User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Book   Book @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, bookId])
}

model Author {
  id         Int          @id
  name       String       @unique
  books      Book[]
  user       User         @relation(fields: [id], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Subsribers Subscriber[]
}

model Subscriber {
  id        Int      @id @default(autoincrement())
  author    Author   @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authorId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ip        String   @db.VarChar(30)
}

model UserProgress {
  id          Int      @id @default(autoincrement())
  userId      Int
  bookId      Int
  currentPage Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Book        Book     @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model DiscountTicket {
  id                 Int      @id @default(autoincrement())
  discountPercentage Float
  discountCode       String
  bookId             Int
  book               Book     @relation(fields: [bookId], references: [id])
  validUntil         DateTime
  used               Boolean  @default(false)
}

model Publisher {
  id      Int     @id @default(autoincrement())
  name    String
  address String?
  website String?
  books   Book[]
}

model Inventory {
  id       Int  @id @default(autoincrement())
  bookId   Int
  quantity Int
  Book     Book @relation(fields: [bookId], references: [id])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  orderDate DateTime    @default(now())
  status    String
  User      User        @relation(fields: [userId], references: [id])
  OrderItem OrderItem[]
  Payment   Payment[]
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  orderId  Int
  bookId   Int
  quantity Int
  Order    Order @relation(fields: [orderId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  Book     Book  @relation(fields: [bookId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model Payment {
  id          Int      @id @default(autoincrement())
  orderId     Int
  paymentDate DateTime @default(now())
  amount      Float
  status      String   @default("pending")
  Order       Order    @relation(fields: [orderId], references: [id])
}
